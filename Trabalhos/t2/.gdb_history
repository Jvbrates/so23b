p *lista_procs[0]
s
n
n
n
s
s
s
n
p self->first 
p *self->first 
p *self->first->previous 
p *self->first->previous->previous 
s
n
n
n
n
n
n
n
s
checkpoint
info checkpoints 
n
n
s
s
p self->first 
p *self->first 
p *self->first->next 
p *self->first->next->next 
p *self->first->next->next->next 
p *self->first
p *self->first->previous 
p *self->first->previous->previous 
p *self->first->previous->previous->previous 
p *self->first->previous->previous->previous->previous 
s
s
s
s
p erro
s
checkpoint 
n
p self->scheduler->first 
p *self->scheduler->first 
p *self->scheduler->first->previous 
p *self->scheduler->first->previous->previous 
p *self->scheduler->first->previous->previous->previous 
p *self->scheduler->first->previous->previous->previous->previous 
s
n
p PID_COUNTER 
n
n
n
n
p *self->scheduler->first->previous->previous->previous->previous 
p *self->scheduler->first->previous->previous->previous
p *self
p *self->scheduler 
p *self->scheduler->first 
p *self->scheduler->first->previous 
info checkpoints 
restart 2
p *self->scheduler->first->previous 
n
p *self->scheduler->first->previous 
s
n
p *self->scheduler->first->previous 
n
p *self->scheduler->first->previous 
n
p *self->scheduler->first->previous 
checkpoint
n
p *self->scheduler->first->previous 
n
p *self->scheduler->first->previous 
p *self->scheduler->first
restart 3
n
s
s
s
s
s
s
s
p *node
s
s
p *lk
s
p *p
print  *p
print  p
s
print  p
s
s
p *p
s
p p->previous_state 
p (int)p->previous_state 
s
info checkpoints 
s
s
s
s
restart 3
restart 4
restart 3
restart 3
restart 0
restart 3
restart 2
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
restart 3
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
p *p
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
p self->scheduler->first 
p *self->scheduler->first 
p *self->scheduler->first->previous 
p &(self->scheduler->first->previous )
whatch *0x55555563d8c8
watch *0x55555563d8c8
r
c
c
c
c
c
c
c
c
p (void *)1432609040
p *0x55555563d8c8
p 0x55555563d8c8
watch 0x55555563d8c8
watch void *(0x55555563d8c8)
watch 
watch -l 0x55555563d8c8
watch -l &0x55555563d8c8
watch &0x55555563d8c8
p node->previous 
p &(node->previous )
awatch -l (node->previous )
r
c
p (node_T *)(0x55555563d8b0)
p (node_t *)(0x55555563d8b0)
p *(node_t *)(0x55555563d8b0)
c
p *(node_t *)(0x55555563d860)
c
c
p *(node_t *)(0x55555563d8b0)
c
btb
bt
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
p *(node_t *)(0x55555563e110)
c
p *(node_t *)(0x55555563e110)
p p->previous_state
bt
info watchpoints 
s
p previous_state 
p p->previous_state 
p (int)p->previous_state 
exit
tty /dev/pts/1
c
r
bt
exit
